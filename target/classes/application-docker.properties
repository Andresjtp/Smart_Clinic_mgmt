# Smart Clinic Management System - Docker Configuration

# Application Info
spring.application.name=smart-clinic-management-system
server.port=8080

# MySQL Database Configuration for Docker
spring.datasource.url=jdbc:mysql://mysql:3306/smart_clinic_db?createDatabaseIfNotExist=true&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username=${MYSQL_USER:clinic_user}
spring.datasource.password=${MYSQL_PASSWORD:clinic_password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Connection pool settings for production
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.connection-timeout=20000

# JPA/Hibernate Configuration for Docker
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# Initialize database with schema only in production
spring.sql.init.mode=never

# MongoDB Configuration for Docker
spring.data.mongodb.host=${MONGO_HOST:mongodb}
spring.data.mongodb.port=${MONGO_PORT:27017}
spring.data.mongodb.database=${MONGO_DATABASE:smart_clinic_mongo_db}
spring.data.mongodb.username=${MONGO_USER:}
spring.data.mongodb.password=${MONGO_PASSWORD:}
spring.data.mongodb.auto-index-creation=true

# Logging Configuration for Docker
logging.level.com.smartcare.clinicmanagementsystem=${LOG_LEVEL:INFO}
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.data.mongodb.core.MongoTemplate=WARN
logging.level.root=${ROOT_LOG_LEVEL:INFO}

# File-based logging for containers
logging.file.path=/app/logs
logging.file.name=/app/logs/smart-clinic-management.log
logging.logback.rollingpolicy.max-file-size=10MB
logging.logback.rollingpolicy.total-size-cap=100MB
logging.logback.rollingpolicy.max-history=30

# Jackson Configuration for JSON handling
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC

# Validation Configuration
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

# JWT Configuration (use environment variables for security)
app.jwt.secret=${JWT_SECRET:bXlTZWNyZXRLZXlGb3JTbWFydENsaW5pY01hbmFnZW1lbnRTeXN0ZW0yMDI0}
app.jwt.expiration=${JWT_EXPIRATION:86400}
app.jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800}

# Server Configuration
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false

# Actuator Configuration for Health Checks
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=always
management.health.db.enabled=true
management.health.mongo.enabled=true

# Security Configuration
server.forward-headers-strategy=framework

# Thread pool configuration
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10
server.tomcat.accept-count=100
server.tomcat.max-connections=8192

# Compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024