version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: smart-clinic-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: smart_clinic_db
      MYSQL_USER: clinic_user
      MYSQL_PASSWORD: clinic_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - smart-clinic-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: smart-clinic-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_admin
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
      MONGO_INITDB_DATABASE: smart_clinic_mongo_db
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - smart-clinic-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # Redis for Caching (Optional)
  redis:
    image: redis:7.2-alpine
    container_name: smart-clinic-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-clinic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s

  # Smart Clinic Management System Application
  smart-clinic-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: smart-clinic-app
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      
      # MySQL Configuration
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: smart_clinic_db
      MYSQL_USER: clinic_user
      MYSQL_PASSWORD: clinic_password
      
      # MongoDB Configuration
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DATABASE: smart_clinic_mongo_db
      MONGO_USER: mongo_admin
      MONGO_PASSWORD: mongo_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Configuration
      JWT_SECRET: U21hcnRDbGluaWNNYW5hZ2VtZW50U3lzdGVtU2VjdXJlSldUU2VjcmV0S2V5MjAyNA==
      JWT_EXPIRATION: 86400
      JWT_REFRESH_EXPIRATION: 604800
      
      # Logging Configuration
      LOG_LEVEL: INFO
      ROOT_LOG_LEVEL: WARN
      
      # Java Options
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
      
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
      - app_temp:/app/temp
    networks:
      - smart-clinic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 30s
      retries: 5
      interval: 30s
      start_period: 60s

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: smart-clinic-nginx
    restart: unless-stopped
    depends_on:
      - smart-clinic-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    networks:
      - smart-clinic-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      timeout: 3s
      retries: 3
      interval: 30s

# Volumes for persistent data
volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_temp:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  smart-clinic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16