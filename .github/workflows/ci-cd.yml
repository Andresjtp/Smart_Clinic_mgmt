name: Smart Clinic Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.4'

jobs:
  # Test Job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: smart_clinic_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_DATABASE: smart_clinic_test_mongo_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Wait for MySQL
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h"127.0.0.1" --silent; then
            echo "MySQL is up"
            break
          fi
          echo "Waiting for MySQL..."
          sleep 1
        done
        if [ "$i" = 0 ]; then
          echo "MySQL failed to start"
          exit 1
        fi
        
    - name: Wait for MongoDB
      run: |
        for i in {30..0}; do
          if mongosh --host 127.0.0.1:27017 --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "MongoDB is up"
            break
          fi
          echo "Waiting for MongoDB..."
          sleep 1
        done
        if [ "$i" = 0 ]; then
          echo "MongoDB failed to start"
          exit 1
        fi
        
    - name: Run unit tests
      env:
        SPRING_PROFILES_ACTIVE: test
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_DATABASE: smart_clinic_test_db
        MYSQL_USER: test_user
        MYSQL_PASSWORD: test_password
        MONGO_HOST: localhost
        MONGO_PORT: 27017
        MONGO_DATABASE: smart_clinic_test_mongo_db
      run: mvn clean test
      
    - name: Run integration tests
      env:
        SPRING_PROFILES_ACTIVE: test
        MYSQL_HOST: localhost
        MYSQL_PORT: 3306
        MYSQL_DATABASE: smart_clinic_test_db
        MYSQL_USER: test_user
        MYSQL_PASSWORD: test_password
        MONGO_HOST: localhost
        MONGO_PORT: 27017
        MONGO_DATABASE: smart_clinic_test_mongo_db
      run: mvn verify -P integration-test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/failsafe-reports/
          target/site/jacoco/

  # Code Quality Job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=smartcare_clinic-management-system \
          -Dsonar.organization=smartcare \
          -Dsonar.host.url=https://sonarcloud.io
          
    - name: Run SpotBugs analysis
      run: mvn com.github.spotbugs:spotbugs-maven-plugin:check
      
    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: spotbugs-results
        path: target/spotbugs*.xml

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image Job
  build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Deploy Job (only on main branch)
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Deploy with Docker Compose
      env:
        IMAGE_TAG: ${{ github.sha }}
        MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        echo "Deploying Smart Clinic Management System..."
        # In a real deployment, this would connect to a remote server
        # docker-compose -f docker-compose.prod.yml up -d
        echo "Deployment completed successfully"
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # In a real deployment, these would be actual health check calls
        # curl -f http://your-domain.com/actuator/health
        echo "Health checks passed"
        
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Smart Clinic Management System deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup Job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-push]
    if: always()
    
    steps:
    - name: Delete old packages
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 5
        delete-only-untagged-versions: 'true'